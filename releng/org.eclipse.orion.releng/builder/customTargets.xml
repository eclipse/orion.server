<project name="WebIDE customTargets overrides" xmlns:ac="antlib:net.sf.antcontrib">
	<!--
	Required properties
	======================================================================
		${buildLabel}       Build ID to inject
		${buildDirectory}   Path to the directory where build will be performed.
	-->

	<property name="super" value="Build specific targets and properties" />

	<import file="${eclipse.pdebuild.templates}/headless-build/customTargets.xml"/>
	
	<!-- These files are found in the org.eclipse.orion.client repo, releng/org.eclipse.orion.client.releng/builder/ -->
	<!-- They are expected to have been copied into the CWD by masterBuild.sh before customTargets is called. -->
	<import file="orion.mini.xml" />
	<import file="orion.jsdoc.xml" />
	
	<!-- Map files are here in the releng project -->
	<target name="getMapFiles"  unless="skipMaps">
		<!--<property name="mapsCheckoutTag" value="HEAD" /> -->
		<mkdir dir="${buildDirectory}/maps" />

		<!--
		<exec executable="git" dir="${buildDirectory}/maps">
			<arg line="archive -format=tar -remote=ssh://dev.eclipse.org/gitroot/orion/org.eclipse.orion.server.git master releng/org.eclipse.orion.releng/maps | tar -xf -" />
		</exec>
		
		<cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" />
		<antcall target="${super}.getMapFiles" />
			
		<antcall target="compareMapFiles"/>
		<antcall target="tagMapFiles" />
		-->
		<copy todir="${buildDirectory}/maps">
			<fileset dir="${builder}/../maps" />
		</copy>

		<replace dir="${buildDirectory}/maps/" value="${eclipsePlatformRepo}" token="ECLIPSE_PLATFORM_REPO" />
		<!--<antcall target="replaceUser" />-->
	</target>

	<target name="replaceUser" if="gitUser" >
		<replace dir="${buildDirectory}/maps/" value="repo=${gitUser}@dev.eclipse.org:/gitroot" token="repo=dev.eclipse.org:/gitroot" />
	</target>

	<target name="tagMapFiles" if="tagMaps" >
		<echo file="${mapTagFile}">
lastMapTag=${mapsTagTag}
		</echo>
		<antcall target="${super}.tagMapFiles" />
	</target>

	<target name="compareMapFiles" if="compareMaps">
		<echo message="${mapTagFile}" />
		<property file="${mapTagFile}" />
		<property name="cvsDiff" value="${buildDirectory}/cvsDiff.txt" />
		<cvs cvsRoot="${mapsRepo}" dest="${builder}/../maps" command="diff -w -r ${lastMapTag}" output="${cvsDiff}" />
		<modifiedMaps mapDiffFile="${cvsDiff}" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preProcessRepos">
		<p2.mirror source="${eclipsePlatformRepo}" destination="${repoBaseLocation}/launchers">
			<slicingOptions includeOptional="false" includeNonGreedy="false" latestVersionOnly="true"/>
			<iu id="org.eclipse.equinox.executable.feature.group" version=""/>
		</p2.mirror>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">

	    <!-- emf needs to be part of the "runnable" target, since Eclipse wants to "require" EMF, 
	         not "include" it -->
	            
		<echo message="Mirror from ${emfRepoURL} to ${localRepoLocation}" />
		<p2.mirror destination="file:${localRepoLocation}" ignoreerrors="true">
			<source location="${emfRepoURL}" />
			<slicingOptions includeOptional="false" includeNonGreedy="false" latestVersionOnly="true" followStrict="true" />
			<iu id="org.eclipse.emf.ecore.feature.group" version="0.0.0" />
			<iu id="org.eclipse.emf.common.feature.group" version="0.0.0" />
			<iu id="org.eclipse.emf.ecore.source.feature.group" version="0.0.0" />
			<iu id="org.eclipse.emf.common.source.feature.group" version="0.0.0" />
		</p2.mirror>

		<!-- mirror Eclipse RCP feature and all prerequisites -->
		<echo message="Mirror from ${eclipsePlatformRepo} to ${localRepoLocation}" />
		<p2.mirror destination="file:${localRepoLocation}" ignoreerrors="true">
			<source location="${eclipsePlatformRepo}" />
			<slicingOptions includeOptional="false" includeNonGreedy="false" latestVersionOnly="true" followStrict="true" />
			<iu id="org.eclipse.rcp.feature.group" version="0.0.0" />
		</p2.mirror>
		
		<!-- convert to runnable form -->
        <echo message="creating runnable in preSetup" />
        <echo message="basedir: ${basedir}" />
		<echo message="buildDirectory: ${buildDirectory}" />	    
	    <echo message="transformedRepoLocation: ${transformedRepoLocation}" />
		<p2.repo2runnable destination="${transformedRepoLocation}">
			<source location="file:${localRepoLocation}" />
		</p2.repo2runnable>
		
	</target>

	<target name="postFetch">
		<replace dir="${buildDirectory}" includes="pluginVersions.properties,featureVersions.properties"  >
			<replacefilter token="HEAD" value="${buildLabel}" />
			<replacefilter token="origin/master" value="${buildLabel}" />
		</replace>
		<!-- Build Id in Orion page footer -->
		<replace dir="${buildDirectory}" includes="**/web/orion/nls/root/messages.js"  >
			<replacefilter token="@buildLabel@" value="${buildLabel}" />
		</replace>
		<available property="jsdocHome" value="${base}/jsdoc-toolkit" file="${base}/jsdoc-toolkit" />
		<available property="requirejsHome" value="${base}/requirejs" file="${base}/requirejs" />
		<property name="closureJar" value="/shared/common/closure/compiler.jar" />
		<property name="buildConfig" value="${builder}/scripts/orion.build.js" />
		<property name="orionClient" value="${buildDirectory}" />

		<!--
			This is a hack to make the shape of our buildDirectory match the shape expected by orion.mini.xml.
			Plugins are supposed to be in a ./bundles/ directory, so copy them in there.
		-->
		<mkdir dir="${buildDirectory}/bundles" />
		<copy todir="${buildDirectory}/bundles" failonerror="false">
			<fileset dir="${buildDirectory}/plugins" includes="**" />
		</copy>

        <record name="${buildDirectory}/optimizer-log.txt" loglevel="verbose" action="start"/>
		<!-- Invoke orion.mini.xml -->
		
		<antcall target="requirejs" />
        <record name="${buildDirectory}/optimizer-log.txt" action="stop"/>

		<!-- Copy minified bundles/ back to plugins/ -->
		<copy todir="${buildDirectory}/plugins" failonerror="false">
			<fileset dir="${buildDirectory}/bundles" includes="**" />
		</copy>

		<antcall target="jsdocs" />

		<!-- Copy JSDocs back -->
		<copy todir="${buildDirectory}/plugins" failonerror="false">
			<fileset dir="${buildDirectory}/doc" includes="**" />
		</copy>

	</target>

	<!--
	<target name="preGenerate">
		<replace file="${buildDirectory}/features/org.eclipse.pde.build.container.feature/feature.xml" token="1.0.0" value="0.5.0.qualifier" />
	</target>
	-->

	<target name="postBuild" >
		<property name="buildResultLocation" value="${buildDirectory}/${buildLabel}" />
		<property name="dropLocation" value="${buildResultLocation}/drop" />
		<mkdir dir="${dropLocation}" />

		<antcall target="gatherLogs" />
		<antcall target="copyResults" />

		<mkdir dir="${buildDirectory}/formatRepo" />
		<copy file="${builder}/html/artifacts.xml" todir="${buildDirectory}/formatRepo" />
		<replace file="${buildDirectory}/formatRepo/artifacts.xml" token="@REPO@" value="integration/${buildLabel}" />

		<p2.mirror source="file:${p2.metadata.repo}" log="${buildDirectory}/${buildLabel}/mirrorLog.txt" ignoreErrors="true" >
			<slicingOptions latestVersionOnly="true"/>
			<destination compressed="true" name="Orion ${buildLabel} metadata" location="file:${updateSite}/${buildLabel}" append="true" format="file:${p2.repo}" kind="metadata" />
			<destination compressed="true" name="Orion ${buildLabel} artifacts" location="file:${updateSite}/${buildLabel}" append="true" format="file:${buildDirectory}/formatRepo" kind="artifact"/>
			<comparator comparator="org.eclipse.equinox.p2.repository.tools.jar.comparator" comparatorLog="${dropLocation}/comparatorlog.txt">
				<repository location="file:${updateSite}" />
			</comparator>
		</p2.mirror>
		<p2.composite.artifact.repository.add location="file:${updateSite}" child="${buildLabel}" />
		<p2.composite.metadata.repository.add location="file:${updateSite}" child="${buildLabel}" />
	</target>

	<target name="copyResults"  >
		<zip destFile="${dropLocation}/compileLogs-${buildLabel}.zip" basedir="${buildResultLocation}/compilelogs" includes="**" />
		<copy todir="${dropLocation}" >
			<fileset dir="${buildResultLocation}" includes="${archiveNamePrefix}*" />
		</copy>
		<property name="widgetOutDirectory" value="${buildDirectory}/built-js" />
		<copy todir="${dropLocation}">
			<fileset dir="${widgetOutDirectory}"></fileset>
		</copy>

		<!-- generate the build index, guess the component version numbers -->
		<filter token="repmaindate" value="${TODAY}" />
		<filter token="repbuildlabel" value="${buildLabel}" />
		<copy filtering="true" file="${builder}/html/build.index.html" tofile="${dropLocation}/index.html" />
		<copy file="${builder}/html/build.download.php" tofile="${dropLocation}/download.php" />

		<copy file="${buildResultLocation}/../directory.txt" tofile="${dropLocation}/directory.txt" />
		<available file="${base}/logs/current.log" property="logExists" />
		<antcall target="copyLog" />
	</target>

	<target name="copyLog" if="logExists" >
		<copy file="${base}/logs/current.log" tofile="${dropLocation}/buildLog-${buildLabel}.txt" />
	</target>

	<target name="gatherLogs">

		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>

		<copy todir="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true" failonerror="false">
			<fileset dir="${buildDirectory}/features/" includes="*/feature.temp.folder/plugins/**" />
			<regexpmapper from="^(.*)/feature.temp.folder/plugins/(.*)" to="\2" />
		</copy>
	</target>

</project>
